//
//  xmlBuilder.swift
//  The MUT v5
//
//  Created by Michael Levenick on 5/24/19.
//  Copyright Â© 2019 Michael Levenick. All rights reserved.
//

import Cocoa
import Foundation

public class xmlManager {
    // Globally declaring the xml variable to allow the various functions to populate it
    var xml: XMLDocument?
    let removalValue = "CLEAR!"


    public func userObject(username: String, full_name: String, email_address: String, phone_number: String, position: String, ldap_server: String, ea_ids: [String], ea_values: [String]) -> Data {

        // User Object update XML Creation:

        // Example of the XML that is generated by this function
        /*
         <user>
             <name>Abigail Anderson</name> // This is actually username
             <full_name/> // Full name (obv)
             <email/> // Email
             <email_address/> // Also email
             <phone_number/>
             <position/>
             <ldap_server>
                <id>-1</id>
             </ldap_server>
             <extension_attributes>
                 <extension_attribute>
                     <id>1</id>
                     <value>Something</value>
                 </extension_attribute>
             </extension_attributes>
             <sites/>
         </user>
         */

        // Variables needed for the rest of the XML Generation
        let root = XMLElement(name: "user")
        let xml = XMLDocument(rootElement: root)

        // Username
        var usernameElement = XMLElement(name: "name", stringValue: username)
        
        if username == removalValue {
            usernameElement = XMLElement(name: "name", stringValue: "")
            root.addChild(usernameElement)
        } else if username != "" {
            root.addChild(usernameElement)
        }

        // Full Name
        var fullNameElement = XMLElement(name: "full_name", stringValue: full_name)
        
        if full_name == removalValue {
            fullNameElement = XMLElement(name: "full_name", stringValue: "")
            root.addChild(fullNameElement)
        } else if full_name != "" {
            root.addChild(fullNameElement)
        }

        // Email Address
        var emailElement = XMLElement(name: "email", stringValue: email_address)
        var emailAddressElement = XMLElement(name: "email_address", stringValue: email_address)
        
        if email_address == removalValue {
            emailElement = XMLElement(name: "email", stringValue: "")
            emailAddressElement = XMLElement(name: "email_address", stringValue: "")
            root.addChild(emailElement)
            root.addChild(emailAddressElement)
        } else if email_address != "" {
            root.addChild(emailElement)
            root.addChild(emailAddressElement)
        }

        // Phone Number
        var phoneNumberElement = XMLElement(name: "phone_number", stringValue: phone_number)
        
        if phone_number == removalValue {
            phoneNumberElement = XMLElement(name: "phone_number", stringValue: "")
            root.addChild(phoneNumberElement)
        } else if phone_number != "" {
            root.addChild(phoneNumberElement)
        }

        // Position
        var positionElement = XMLElement(name: "position", stringValue: position)
        
        if position == removalValue {
            positionElement = XMLElement(name: "position", stringValue: "")
            root.addChild(positionElement)
        } else if position != "" {
            root.addChild(positionElement)
        }

        // LDAP Server
        var ldapServerElement = XMLElement(name: "ldap_server")
        var ldapServerIDElement = XMLElement(name: "id", stringValue: ldap_server) // Set LDAP Server ID to -1 to unassign from all.
        
        if ldap_server == removalValue {
            ldapServerElement = XMLElement(name: "ldap_server")
            ldapServerIDElement = XMLElement(name: "id", stringValue: "-1")
            ldapServerElement.addChild(ldapServerIDElement)
            root.addChild(ldapServerElement)
        } else if ldap_server != "" {
            ldapServerElement.addChild(ldapServerIDElement)
            root.addChild(ldapServerElement)
        }

        // Extension Attributes
        let extensionAttributesElement = XMLElement(name: "extension_attributes")
        
        if ea_values.count > 0 {
            // Loop through the EA values, adding them to the EA node
            for i in 0...(ea_ids.count - 1 ) {

                // Position
                if ea_values[i] == removalValue {
                    let currentExtensionAttributesElement = XMLElement(name: "extension_attribute")
                    currentExtensionAttributesElement.addChild(XMLElement(name: "id", stringValue: ea_ids[i]))
                    currentExtensionAttributesElement.addChild(XMLElement(name: "value", stringValue: ""))
                    extensionAttributesElement.addChild(currentExtensionAttributesElement)
                } else if ea_values[i] != "" {
                    let currentExtensionAttributesElement = XMLElement(name: "extension_attribute")
                    currentExtensionAttributesElement.addChild(XMLElement(name: "id", stringValue: ea_ids[i]))
                    currentExtensionAttributesElement.addChild(XMLElement(name: "value", stringValue: ea_values[i]))
                    extensionAttributesElement.addChild(currentExtensionAttributesElement)
                }
            }

            // Add the EA subset to the root element

            root.addChild(extensionAttributesElement)
        }

        // Print the XML
        print(xml.debugDescription) // Uncomment for debugging
        return xml.xmlData
    }


    public func iosObject(displayName: String, assetTag: String, username: String, full_name: String, email_address: String, phone_number: String, position: String, department: String, building: String, room: String, poNumber: String, vendor: String, poDate: String, warrantyExpires: String, leaseExpires: String, ea_ids: [String], ea_values: [String]) -> Data {

        // User Object update XML Creation:

        // Example of the XML that is generated by this function
        /*
         <mobile_device>
             <general>
                 <display_name>Mini</display_name>
                 <device_name>Mini</device_name>
                 <name>Mini</name>
                 <asset_tag/>
                 <phone_number/>
                 <site>
                     <id>-1</id>
                     <name>None</name>
                 </site>
             </general>
             <location>
                 <username/>
                 <realname/>
                 <real_name/>
                 <email_address/>
                 <position/>
                 <phone/>
                 <phone_number/>
                 <department/>
                 <building/>
                 <room/>
             </location>
             <purchasing>
                 <po_number/>
                 <vendor/>
                 <po_date/>
                 <warranty_expires/>
                 <lease_expires/>
             </purchasing>
         </mobile_device>
         */

        // Variables needed for the rest of the XML Generation
        let root = XMLElement(name: "mobile_device")
        let xml = XMLDocument(rootElement: root)
        let general = XMLElement(name: "general")
        let location = XMLElement(name: "location")
        let purchasing = XMLElement(name: "purchasing")
        
        // ----------------------
        // DEVICE NAME
        // ----------------------

        let displayNameElement = XMLElement(name: "display_name", stringValue: displayName)
        let deviceNameElement = XMLElement(name: "device_name", stringValue: displayName)
        let nameElement = XMLElement(name: "name", stringValue: displayName)

        if displayName != "" {
            general.addChild(displayNameElement)
            general.addChild(deviceNameElement)
            general.addChild(nameElement)
        }


        // ----------------------
        // GENERAL ATTRIBUTES
        // ----------------------
        
        // Asset Tag
        var assetTagElement = XMLElement(name: "asset_tag", stringValue: assetTag)
        
        if assetTag == removalValue {
            assetTagElement = XMLElement(name: "asset_tag", stringValue: "")
            general.addChild(assetTagElement)
        } else if assetTag != "" {
            general.addChild(assetTagElement)
        }
        
        // ----------------------
        // LOCATION ATTRIBUTES
        // ----------------------
        
        // Username
        var usernameElement = XMLElement(name: "username", stringValue: username)
        
        if username == removalValue {
            usernameElement = XMLElement(name: "username", stringValue: "")
            location.addChild(usernameElement)
        } else if username != "" {
            location.addChild(usernameElement)
        }
        
        // Real Name
        var realnameElement = XMLElement(name: "realname", stringValue: full_name)
        var real_nameElement = XMLElement(name: "real_name", stringValue: full_name)
        
        if full_name == removalValue {
            realnameElement = XMLElement(name: "realname", stringValue: "")
            location.addChild(realnameElement)
            real_nameElement = XMLElement(name: "real_name", stringValue: "")
            location.addChild(real_nameElement)
        } else if full_name != "" {
            location.addChild(realnameElement)
            location.addChild(real_nameElement)
        }
        
        // Email Address
        var emailAddressElement = XMLElement(name: "email_address", stringValue: email_address)
        
        if email_address == removalValue {
            emailAddressElement = XMLElement(name: "email_address", stringValue: "")
            location.addChild(emailAddressElement)
        } else if email_address != "" {
            location.addChild(emailAddressElement)
        }
        
        // Position
        var positionElement = XMLElement(name: "position", stringValue: position)
        
        if position == removalValue {
            positionElement = XMLElement(name: "position", stringValue: "")
            location.addChild(positionElement)
        } else if position != "" {
            location.addChild(positionElement)
        }
        
        // Phone Number
        var phoneElement = XMLElement(name: "phone", stringValue: phone_number)
        var phoneNumberElement = XMLElement(name: "phone_number", stringValue: phone_number)
        
        if phone_number == removalValue {
            phoneElement = XMLElement(name: "phone", stringValue: "")
            location.addChild(phoneElement)
            phoneNumberElement = XMLElement(name: "phone_number", stringValue: "")
            location.addChild(phoneNumberElement)
        } else if phone_number != "" {
            location.addChild(phoneElement)
            location.addChild(phoneNumberElement)
        }
        
        // Department
        var departmentElement = XMLElement(name: "department", stringValue: department)
        
        if department == removalValue {
            departmentElement = XMLElement(name: "department", stringValue: "")
            location.addChild(departmentElement)
        } else if department != "" {
            location.addChild(departmentElement)
        }
        
        // Building
        var buildingElement = XMLElement(name: "building", stringValue: building)
        
        if building == removalValue {
            buildingElement = XMLElement(name: "building", stringValue: "")
            location.addChild(buildingElement)
        } else if building != "" {
            location.addChild(buildingElement)
        }
        
        // Room
        var roomElement = XMLElement(name: "room", stringValue: room)
        
        if room == removalValue {
            roomElement = XMLElement(name: "position", stringValue: "")
            location.addChild(roomElement)
        } else if room != "" {
            location.addChild(roomElement)
        }
        
        // ----------------------
        // PURCHASING ATTRIBUTES
        // ----------------------
        
        // PO Number
        var poNumberElement = XMLElement(name: "po_number", stringValue: poNumber)
        
        if poNumber == removalValue {
            poNumberElement = XMLElement(name: "po_number", stringValue: "")
            purchasing.addChild(poNumberElement)
        } else if poNumber != "" {
            purchasing.addChild(poNumberElement)
        }
        
        // Vendor
        var vendorElement = XMLElement(name: "vendor", stringValue: vendor)
        
        if vendor == removalValue {
            vendorElement = XMLElement(name: "vendor", stringValue: "")
            purchasing.addChild(vendorElement)
        } else if vendor != "" {
            purchasing.addChild(vendorElement)
        }
        
        // PO Date
        var poDateElement = XMLElement(name: "po_date", stringValue: poDate)
        
        if poDate == removalValue {
            poDateElement = XMLElement(name: "po_date", stringValue: "")
            purchasing.addChild(poDateElement)
        } else if vendor != "" {
            purchasing.addChild(poDateElement)
        }
        
        // Warranty Expires
        var warrantyExpiresElement = XMLElement(name: "warranty_expires", stringValue: warrantyExpires)
        
        if warrantyExpires == removalValue {
            warrantyExpiresElement = XMLElement(name: "warranty_expires", stringValue: "")
            purchasing.addChild(warrantyExpiresElement)
        } else if warrantyExpires != "" {
            purchasing.addChild(warrantyExpiresElement)
        }
        
        // Lease Expires
        var leaseExpiresElement = XMLElement(name: "lease_expires", stringValue: leaseExpires)
        
        if leaseExpires == removalValue {
            leaseExpiresElement = XMLElement(name: "lease_expires", stringValue: "")
            purchasing.addChild(leaseExpiresElement)
        } else if leaseExpires != "" {
            purchasing.addChild(leaseExpiresElement)
        }
        
        // ----------------------
        // EXTENSION ATTRIBUTES
        // ----------------------



        let extensionAttributesElement = XMLElement(name: "extension_attributes")

        if ea_values.count > 0 {
            // Loop through the EA values, adding them to the EA node
            for i in 0...(ea_ids.count - 1 ) {

                // Position
                if ea_values[i] == removalValue {
                    let currentExtensionAttributesElement = XMLElement(name: "extension_attribute")
                    currentExtensionAttributesElement.addChild(XMLElement(name: "id", stringValue: ea_ids[i]))
                    currentExtensionAttributesElement.addChild(XMLElement(name: "value", stringValue: ""))
                    extensionAttributesElement.addChild(currentExtensionAttributesElement)
                } else if ea_values[i] != "" {
                    let currentExtensionAttributesElement = XMLElement(name: "extension_attribute")
                    currentExtensionAttributesElement.addChild(XMLElement(name: "id", stringValue: ea_ids[i]))
                    currentExtensionAttributesElement.addChild(XMLElement(name: "value", stringValue: ea_values[i]))
                    extensionAttributesElement.addChild(currentExtensionAttributesElement)
                }
            }

            // Add the EA subset to the root element


        }

        root.addChild(general)
        root.addChild(location)
        root.addChild(purchasing)
        root.addChild(extensionAttributesElement)


        // Print the XML
        print(xml.debugDescription) // Uncomment for debugging
        return xml.xmlData
    }
}
