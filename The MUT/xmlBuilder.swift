//
//  xmlBuilder.swift
//  The MUT v5
//
//  Created by Michael Levenick on 5/24/19.
//  Copyright Â© 2019 Michael Levenick. All rights reserved.
//

import Cocoa
import Foundation

public class xmlManager {
    // Globally declaring the xml variable to allow the various functions to populate it
    var xml: XMLDocument?
    let removalValue = "CLEAR!"


    public func userObject(username: String, full_name: String, email_address: String, phone_number: String, position: String, ldap_server: String) -> Data {

        // User Object update XML Creation:

        // Example of the XML that is generated by this function
        /*
         <user>
             <name>Abigail Anderson</name> // This is actually username
             <full_name/> // Full name (obv)
             <email/> // Email
             <email_address/> // Also email
             <phone_number/>
             <position/>
             <ldap_server>
                <id>-1</id>
             </ldap_server>
             <extension_attributes>
                 <extension_attribute>
                     <id>1</id>
                     <value>Something</value>
                 </extension_attribute>
             </extension_attributes>
             <sites/>
         </user>
         */
        
        // Variables needed to dynamically build the EA portion of the XML
//        var eaIDsElement = [XMLElement]()
//        eaIDs = [XMLElement(name: "id", stringValue: "1"), XMLElement(name: "id", stringValue: "2")]
//        var eaValuesElement = [XMLElement]()
//        eaValues = [XMLElement(name: "value", stringValue: "Monkey"), XMLElement(name: "value", stringValue: "Banana")]

        // Variables needed for the rest of the XML Generation
        let root = XMLElement(name: "user")
        let xml = XMLDocument(rootElement: root)
        var usernameElement = XMLElement(name: "name", stringValue: username)
        var fullNameElement = XMLElement(name: "full_name", stringValue: full_name)
        var emailElement = XMLElement(name: "email", stringValue: email_address)
        var emailAddressElement = XMLElement(name: "email_address", stringValue: email_address)
        var phoneNumberElement = XMLElement(name: "phone_number", stringValue: phone_number)
        var positionElement = XMLElement(name: "position", stringValue: position)
        var ldapServerElement = XMLElement(name: "ldap_server")
        var ldapServerIDElement = XMLElement(name: "id", stringValue: ldap_server) // Set LDAP Server ID to -1 to unassign from all.
        var extensionAttributesElement = XMLElement(name: "extension_attributes")
        
        // Add all the XML Nodes to the root element

        // Username
        if username == removalValue {
            usernameElement = XMLElement(name: "name", stringValue: "")
            root.addChild(usernameElement)
        } else if username != "" {
            root.addChild(usernameElement)
        }

        // Full Name
        if full_name == removalValue {
            fullNameElement = XMLElement(name: "full_name", stringValue: "")
            root.addChild(fullNameElement)
        } else if full_name != "" {
            root.addChild(fullNameElement)
        }

        // Email Address
        if email_address == removalValue {
            emailElement = XMLElement(name: "email", stringValue: "")
            emailAddressElement = XMLElement(name: "email_address", stringValue: "")
            root.addChild(emailElement)
            root.addChild(emailAddressElement)
        } else if email_address != "" {
            root.addChild(emailElement)
            root.addChild(emailAddressElement)
        }

        // Phone Number
        if phone_number == removalValue {
            phoneNumberElement = XMLElement(name: "phone_number", stringValue: "")
            root.addChild(phoneNumberElement)
        } else if phone_number != "" {
            root.addChild(phoneNumberElement)
        }

        // Position
        if position == removalValue {
            positionElement = XMLElement(name: "position", stringValue: "")
            root.addChild(positionElement)
        } else if position != "" {
            root.addChild(positionElement)
        }

        // LDAP Server
        if ldap_server == removalValue {
            ldapServerElement = XMLElement(name: "ldap_server")
            ldapServerIDElement = XMLElement(name: "id", stringValue: "-1")
            ldapServerElement.addChild(ldapServerIDElement)
            root.addChild(ldapServerElement)
        } else if ldap_server != "" {
            ldapServerElement.addChild(ldapServerIDElement)
            root.addChild(ldapServerElement)
        }

        // Loop through the EA values, adding them to the EA node
//        for i in 1...2 {
//            let currentEAID = eaIDs[i-1]
//            let currentEAValue = eaValues[i-1]
//            let currentExtensionAttributes = XMLElement(name: "extension_attribute")
//            currentExtensionAttributes.addChild(currentEAID)
//            currentExtensionAttributes.addChild(currentEAValue)
//            extensionAttributes.addChild(currentExtensionAttributes)
//        }

        // Add the EA subset to the root element
//        root.addChild(extensionAttributes)

        // Print the XML
        // print(xml.debugDescription) // Uncomment for debugging
        return xml.xmlData
    }


    public func iosObject(displayName: String, assetTag: String, username: String, full_name: String, email_address: String, phone_number: String, position: String, department: String, building: String, room: String, poNumber: String, vendor: String, poDate: String, warrantyExpires: String, leaseExpires: String) -> Data {

        // User Object update XML Creation:

        // Example of the XML that is generated by this function
        /*
         <mobile_device>
             <general>
                 <display_name>Mini</display_name>
                 <device_name>Mini</device_name>
                 <name>Mini</name>
                 <asset_tag/>
                 <phone_number/>
                 <site>
                     <id>-1</id>
                     <name>None</name>
                 </site>
             </general>
             <location>
                 <username/>
                 <realname/>
                 <real_name/>
                 <email_address/>
                 <position/>
                 <phone/>
                 <phone_number/>
                 <department/>
                 <building/>
                 <room/>
             </location>
             <purchasing>
                 <po_number/>
                 <vendor/>
                 <po_date/>
                 <warranty_expires/>
                 <lease_expires/>
             </purchasing>
         </mobile_device>
         */

        // Variables needed to dynamically build the EA portion of the XML
        var eaIDs = [XMLElement]()
        eaIDs = [XMLElement(name: "id", stringValue: "1"), XMLElement(name: "id", stringValue: "2")]
        var eaValues = [XMLElement]()
        eaValues = [XMLElement(name: "value", stringValue: "Monkey"), XMLElement(name: "value", stringValue: "Banana")]

        // Variables needed for the rest of the XML Generation
        let root = XMLElement(name: "mobile_device")
        let xml = XMLDocument(rootElement: root)
        let general = XMLElement(name: "general")
        let location = XMLElement(name: "location")
        let purchasing = XMLElement(name: "purchasing")
        let display_name = XMLElement(name: "display_name", stringValue: displayName)
        let device_name = XMLElement(name: "device_name", stringValue: displayName)
        let name = XMLElement(name: "name", stringValue: displayName)
        let asset_tag = XMLElement(name: "asset_tag", stringValue: assetTag)
        let username = XMLElement(name: "username", stringValue: username)
        let realname = XMLElement(name: "realname", stringValue: full_name)
        let real_name = XMLElement(name: "real_name", stringValue: full_name)
        let emailAddress = XMLElement(name: "email_address", stringValue: email_address)
        let position = XMLElement(name: "position", stringValue: position)
        let phone = XMLElement(name: "phone", stringValue: phone_number)
        let phoneNumber = XMLElement(name: "phone_number", stringValue: phone_number)
        let department = XMLElement(name: "department", stringValue: department)
        let building = XMLElement(name: "building", stringValue: building)
        let room = XMLElement(name: "room", stringValue: room)
        let po_number = XMLElement(name: "po_number", stringValue: poNumber)
        let vendor = XMLElement(name: "vendor", stringValue: vendor)
        let po_date = XMLElement(name: "po_date", stringValue: poDate)
        let warranty_expires = XMLElement(name: "warranty_expires", stringValue: warrantyExpires)
        let lease_expires = XMLElement(name: "lease_expires", stringValue: leaseExpires)
        let extensionAttributes = XMLElement(name: "extension_attributes")

        // Add all the XML Nodes to the root element
        general.addChild(display_name)
        general.addChild(device_name)
        general.addChild(name)
        general.addChild(asset_tag)
        location.addChild(username)
        location.addChild(realname)
        location.addChild(real_name)
        location.addChild(emailAddress)
        location.addChild(position)
        location.addChild(phone)
        location.addChild(phoneNumber)
        location.addChild(department)
        location.addChild(building)
        location.addChild(room)
        purchasing.addChild(po_number)
        purchasing.addChild(vendor)
        purchasing.addChild(po_date)
        purchasing.addChild(warranty_expires)
        purchasing.addChild(lease_expires)

        root.addChild(general)
        root.addChild(location)
        root.addChild(purchasing)

        // Loop through the EA values, adding them to the EA node
        //        for i in 1...2 {
        //            let currentEAID = eaIDs[i-1]
        //            let currentEAValue = eaValues[i-1]
        //            let currentExtensionAttributes = XMLElement(name: "extension_attribute")
        //            currentExtensionAttributes.addChild(currentEAID)
        //            currentExtensionAttributes.addChild(currentEAValue)
        //            extensionAttributes.addChild(currentExtensionAttributes)
        //        }

        // Add the EA subset to the root element
//        root.addChild(extensionAttributes)

        // Print the XML
        print(xml.debugDescription) // Uncomment for debugging
        return xml.xmlData
    }

}
